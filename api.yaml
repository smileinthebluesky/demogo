AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: cloudformation for multi-tenancy 

Parameters:
  AllowedOrigin:
    Type: 'String'

Globals:
  Function:
    Timeout: 30
    Tracing: Active
    AutoPublishAlias: live
    Runtime: python3.9
    MemorySize: 256
    Environment:
      Variables:
        LOG_LEVEL: "DEBUG"
        ALLOWED_ORIGIN: !Ref AllowedOrigin
        TABLE_NAME: !Ref DynamoDBApartmentTable
  Api:
    EndpointConfiguration: REGIONAL
    TracingEnabled: true
    OpenApiVersion: '2.0'
    Cors:
      AllowMethods: "'OPTIONS,POST,GET'"
      AllowHeaders: "'Content-Type,Authorization'"
      AllowCredentials: true
      AllowOrigin: !Sub "'${AllowedOrigin}'"

Resources:
  
  # Create Congnito 
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub ${AWS::StackName}-UserPool
      Policies:
        PasswordPolicy:
          MinimumLength : 8 
      UsernameAttributes:
        - email
      Schema:
          - AttributeDataType: String
            Name: email
            Required: true
            Mutable: false
      EmailSendingAccount: COGNITO_DEFAULT
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: my-app
      GenerateSecret: false
      UserPoolId: !Ref CognitoUserPool
      #DefaultRedirectURI: String
  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties: 
      Domain: "multi-tenancy-demogo"
      UserPoolId: !Ref CognitoUserPool
  
  InitializeCognito:
    Type: Custom::InitCognito
    DependsOn: CognitoUserPool
    Properties:
      ServiceToken: !GetAtt InitCognitoFunction.Arn
  
  InitCognitoFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: demogo/
      Handler: init_cognito.lambda_handler
      Role: !GetAtt InitCognitoRole.Arn
      Environment:
        Variables:
          USERPOOL_ID: !Ref CognitoUserPool
          UserPool_Arn: !GetAtt CognitoUserPool.Arn
          UserPoolApp_Client: !Ref UserPoolClient
          
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: CFNCluster
  taskdefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      containerDefinitions:
        - name: web
          image: 126554542098.dkr.ecr.ap-northeast-2.amazonaws.com/flask:latest
          portMappings:
           - containerPort: 5000
             hostPort: 80
             protocol: tcp
      cpu: '256'
      executionRoleArn: !Ref EcsRole
      networkMode: awsvpc
      requiresCompatibilities:
        - FARGATE
      runtimePlatform:
        OperatingSystemFamily: LINUX    
  ECSService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: cfn-service
      Cluster: !Ref ECSCluster
      DesiredCount: 1 
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref InstanceSecurityGroup
          Subnets:
            - !Ref mySubnet
      TaskDefinition: !Ref taskdefinition

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to client host
      VpcId: Ref: myVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  myVPC:
  Type: AWS::EC2::VPC
  Properties:
    CidrBlock: 10.0.0.0/16
    EnableDnsSupport: 'true'
    EnableDnsHostnames: 'true'

  mySubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      CidrBlock: 10.0.0.0/24
      AvailabilityZone: "ap-northeast-2"


  # Create 
  AptsApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      MethodSettings:
        - DataTraceEnabled: True
          MetricsEnabled: True
          ResourcePath: "/*"
          HttpMethod: "*"
          LoggingLevel: INFO
      Auth:
        Authorizers:
            CognitoAuthorizer:
              UserPoolArn: !GetAtt CognitoUserPool.Arn

  InitCognitoRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Action:
              - "sts:AssumeRole"
              Effect: "Allow"
              Principal:
                Service:
                  - "lambda.amazonaws.com"
  EcsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Action:
              - "sts:AssumeRole"
              Effect: "Allow"
              Principal:
                Service:
                  - "ecs.amazonaws.com"


  AuthRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Action:
              - "sts:AssumeRole"
              Effect: "Allow"
              Principal:
                Service:
                  - "lambda.amazonaws.com"

  GetAptsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Action:
              - "sts:AssumeRole"
              Effect: "Allow"
              Principal:
                Service:
                  - "lambda.amazonaws.com"
  
  InitDynamoRole:
  Type: AWS::IAM::Role
  Properties:
    AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
            - "sts:AssumeRole"
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"


  LambdaLoggingPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: LambdaXRayPolicy
      PolicyDocument:
          Version: "2012-10-17"
          Statement:
              Effect: "Allow"
              Action: [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents"
                ]
              Resource: "*"
      Roles:
          - !Ref AuthRole
          - !Ref GetAptsRole

  DynamoDBReadPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: DynamoDBReadPolicy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
            Effect: "Allow"
            Action: [
              "dynamodb:GetItem",
              "dynamodb:Scan",
              "dynamodb:Query",
              "dynamodb:BatchGetItem",
              "dynamodb:DescribeTable"
            ]
            Resource:
              - !GetAtt DynamoDBApartmentTable.Arn
      Roles:
        - !Ref AuthRole
        - !Ref GetAptsRole
        - !Ref EcsRole
  
  DynamoDBWritePolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: DynamoDBWritePolicy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
            Effect: "Allow"
            Action: [
              "dynamodb:PutItem"
            ]
            Resource:
              - !GetAtt DynamoDBApartmentTable.Arn
      Roles:
        - !Ref InitDynamoRole
  
  CognitoPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: CognitoPolicy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
            Effect: "Allow"
            Action: [
              "cognito-idp:*",
            ]
            Resource:
              - !Sub arn:aws:s3:::${CognitoUserPool}
      Roles:
        - !Ref AuthRole
        - !Ref GetAptsRole
        - !Ref InitCognitoRole
        - !Ref EcsRole
  
  DynamoDBApartmentTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: apartment_id
          AttributeType: S
      KeySchema:
        - AttributeName: apartment_id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
  
  InitializeDynamoDB:
    Type: Custom::InitDynamo
    DependsOn: DynamoDBApartmentTable
    Properties:
      ServiceToken: !GetAtt InitDynamoFunction.arn
  
  InitDynamoFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: demogo/
      Handler: init_dynamo.lambda_handler
      Role: !GetAtt InitDynamoRole.Arn
      Environment:
        Variables:
          USERPOOL_ID: !Ref CognitoUserPool
          UserPool_Arn: !GetAtt CognitoUserPool.Arn
          UserPoolApp_Client: !Ref UserPoolClient

  AuthFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - LambdaLoggingPolicy
    Properties:
      CodeUri: demogo/
      Handler: auth.lambda_handler
      Role: !GetAtt AuthRole.Arn
      Layers:
        - !Ref UtilsLayer
      Environment:
        Variables:
          USERPOOL_ID: !Ref CognitoUserPool
          UserPool_Arn: !GetAtt CognitoUserPool.Arn
          UserPoolApp_Client: !Ref UserPoolClient
      Events:
        AuthApi:
          Type: Api
          Properties:
            RestApiId: !Ref AptsApi
            Path: /getAuth/{tier}
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer

  GetAptsFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - LambdaLoggingPolicy
    Properties:
      CodeUri: demogo/
      Handler: app.app
      Role: !GetAtt GetAptsRole.Arn
      Layers:
        - !Ref UtilsLayer
      Environment:
        Variables:
          USERPOOL_ID: !Ref CognitoUserPool
          UserPool_Arn: !GetAtt CognitoUserPool.Arn
          UserPoolApp_Client: !Ref UserPoolClient
      Events:
        AptsInfo:
          Type: Api
          Properties:
            RestApiId: !Ref AptsApi
            Path: /getApts
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer

  UserPoolSSM:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name: /demogo-multitenancy/auth/user-pool-id
      Value: !Ref CognitoUserPool

  UserPoolARNSSM:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name: /demogo-multitenancy/auth/user-pool-arn
      Value: !GetAtt CognitoUserPool.Arn

  UserPoolClientSSM:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name: /demogo-multitenancy/auth/user-pool-client-id
      Value: !Ref UserPoolClient

  GetAptsInfoUrl:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name: /demogo-multitenancy/apts/apts-api-url
      Value: !Sub "https://${AptsApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/getApts"

  AuthApiUrl: 
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name: /demogo-multitenancy/auth/auth-api-url
      Value: !Sub "https://${AptsApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/getAuth"

Outputs:

  CognitoCognitoUserPool:
    Description: "Cognito User Pool ID"
    Value: !Ref CognitoUserPool

  CognitoAppClientId:
    Description: "Cognito App Client ID"
    Value: !Ref UserPoolClient

  UserPoolARN:
    Description: "UserPool Arn"
    Value: !Ref UserPoolARNSSM

  AptsInfo:
    Description: "API Gateway endpoint URL for Prod stage for apt"
    Value: !Sub "https://${AptsApi}.execute-api.${AWS::Region}.amazonaws.com/Prod"
  AuthApi:
    Description: "API Gateway endpoint URL for Prod stage for auth"
    Value: !Sub "https://${AptsApi}.execute-api.${AWS::Region}.amazonaws.com/Prod"